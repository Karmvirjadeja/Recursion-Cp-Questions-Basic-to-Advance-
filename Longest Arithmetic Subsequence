class Solution {
public:
    int dp[1001][2001];


    int solve(int idx, int diff, vector<int>& nums) {
        if (dp[idx][diff + 1000] != -1) return dp[idx][diff + 1000];
        int ans = 0;
        for (int k = idx - 1; k >= 0; k--) {
            if ((nums[idx] - nums[k]) == diff) {
                ans = max(ans, 1 + solve(k, diff, nums));
            }
        }
        return dp[idx][diff + 1000] = ans;
    }


    int longestArithSeqLength(vector<int>& nums) {
        memset(dp, -1, sizeof(dp));
        int n = nums.size();
        if (n <= 2) return n;
        int result = 0;


        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i];
                result = max(result, 2 + solve(i, diff, nums));
            }
        }


        return result;
    }
};




(Using the bottom up approach same as the Longest increasing subsequence)
It is more good and faster than the above
Time Complexity: O(n2)
Space Complexity: O(n)

class Solution {
public:
   
    int longestArithSeqLength(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(1001,0));
        int result=0;
        for (int i = 1; i < n; i++) {
            for (int j =0; j < i; j++) {
                int diff = nums[i] - nums[j]+500;  //Here to cope up if the index become negative
                dp[i][diff]=dp[j][diff]>0?1+dp[j][diff]:2;
                result=max(result,dp[i][diff]);
               
            }
        }


        return result;
    }
};
